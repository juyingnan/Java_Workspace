<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="700" height="300"
		   xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
		   xmlns:layout="org.un.cava.birdeye.ravis.graphLayout.layout.*" >
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.layout.HierarchicalLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
			
			// These are the item renderers
			//			import renderers.nodes.mxml.basicNodeRenderer;
			//			import renderers.edgelabels.mxml.basicEdgeLabelRenderer;
			
			/* 
			* The following local variables hold various
			* important object references
			*/
			
			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
//			[Bindable]
//			public var list:ArrayCollection = new ArrayCollection(
//				[ {label:"-- Please select an Independent Basis Path --", data:-1},
//					{label:"Independent Basis Path 1", data:1}, 
//					{label:"Independent Basis Path 2", data:2}, 
//					{label:"Independent Basis Path 3", data:3},
//					{label:"Independent Basis Path 4", data:4}]);
			
			[Bindable]
			private var list:ArrayCollection;
			
			private var BPNumber:int;
			
			private function initList():void{
				list = new ArrayCollection();
				list.addItem({label:"-- Please select an Independent Basis Path --", data:-1});
//				BPNumber = BPxml.basicPath.length();
				for (var i:int = 1;i <= BPNumber;i++){
					list.addItem({label:"Independent Basis Path " + i, data:i});
				}
			}

			/*
			* event handler for HTTPService, does all the remaining required
			* initialisation */
			
			public function initializeView():void{
				if(vgraph!=null)vgraph.graph=null;
			}
			
			public function activate():void{
				TestingObject.Instance.addEventListener(TestingObject.TESTINGEVENT, testingComplete);
				TestingObject.Instance.doTesting();
				TestingObject.Instance.showPop(this);
			}
			
			private var FGxml:XML;
			private var BPxml:XML;
			
			private var itemSelected:int;
			private var xmldataBasicPath:XML;
			
			
			private function getXML():void{
				FGxml = new XML(TestingObject.Instance.Result.split("$$$$$")[0]);
				BPxml = new XML(TestingObject.Instance.Result.split("$$$$$")[1]);
				BPNumber = BPxml.basicPath.length();
				xmldataBasicPath = FGxml.copy();
			}
			
			private function draw():void{
				
				/* init a graph object with the XML data */
				graph = new org.un.cava.birdeye.ravis.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldataBasicPath);
				
				/* set the graph in the VGraph object, this automatically
				* initializes the VGraph items; 
				* note: vgraph is the id of the mxml specified VisualGraph component */
				vgraph.graph = graph;
				
				/* set the default layouter type */
				layouter = new HierarchicalLayouter(vgraph);
				vgraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				/* set the layouter */
				vgraph.edgeRenderer = new DirectedArrowEdgeRenderer(vgraph.edgeDrawGraphics);
				
				/* set the visibility limit options, default 2 
				* a.k.a degrees of separation */
				vgraph.maxVisibleDistance = 10;
				
				/* select a root node, most layouters requires a root node
				*  Note: Id 1 is referring to node id in the XML file */
				startRoot = graph.nodeByStringId("0").vnode;
				
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = true;
				
				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;
				initDone = true;
				vgraph.draw();
				
			}
			
			private function testingComplete(e:Event):void {
				getXML();
				initList();
				display.text = FGxml.toString();
				draw();
			}

			public function chooseBasicPath(event:Event):void {
				xmldataBasicPath = FGxml.copy();
//				myLabel.text = ""+  ComboBox(event.target).selectedItem.label;
				itemSelected = ComboBox(event.target).selectedItem.data;
				getBasicPathXML(xmldataBasicPath);
				
				draw();
			}
			
			public function getBasicPathXML(sourceXML:XML):void{
				var item:XMLList = BPxml.basicPath[itemSelected-1].node;
				//				var itemEdge:XMLList = sourceXML.Edge;
				//				var itemNode:XMLList = sourceXML.Node;
				
				for(var i:int = 0;i<item.length()-1;i++){
					for(var j:int = 0;j<sourceXML.Edge.length();j++){
						if(item[i].@id == sourceXML.Edge[j].@fromID && item[i+1].@id == sourceXML.Edge[j].@toID){
							sourceXML.Edge[j].@color = "0xff0000";
						}
					}
				}
				
				for(var m:int = 0;m<item.length();m++){
					for(var n:int = 0;n<sourceXML.Node.length();n++){
						if(item[m].@id == sourceXML.Node[n].@id){
							sourceXML.Node[n].@nodeColor = "0xff0000";
						}							
					}					
				}
				
			}
			
		]]>
	</mx:Script>
	
	<mx:Style source="styles/main.css" />
	<!--mx:XML id="xmldata" source="data\temp.xml"  /-->	
	<!--mx:Panel id="main" title="Flow graph" width="100%" height="100%" 
	verticalAlign="middle" horizontalAlign="center" 
	borderColor="#CCCCCC" paddingBottom="5" horizontalGap="5"-->
	<mx:Canvas id="graphCnvs" width="100%" height="100%"  >		
		<ravis:VisualGraph id="vgraph" width="100%" height="100%" 
						   left="0" right="0" top="0" bottom="0"
						   backgroundColor="#FFFFFF" alpha="1"
						   itemRenderer="renderers.nodes.mxml.sizeColorNodeRenderer"
						   edgeLabelRenderer="renderers.edgelabels.mxml.basicEdgeLabelRenderer" 
						   visibilityLimitActive="true"
						   >
		</ravis:VisualGraph>
		<mx:ComboBox id="BPselector" dataProvider="{list}" change="chooseBasicPath(event)" x="20" y="20"/>
		<!--mx:Label id="myLabel" x="30" y="150"/-->
		<mx:TextArea id="display" height="500" width="100"/>
		<!--mx:Label text="Double Click Node to Traverse Graph" bottom="0" right="5" /-->
	</mx:Canvas>
	<!--/mx:Panel-->
	
	
</mx:Canvas>
